[ ] - 1400024D0     __C_specific_handler
[ ] - 

        - key len is 20h = 32
        - F446543CFF363F882FA72A5080F5BA6F
        - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
==================================================================================================
- C++
- TLS Callback
- Function tables
    -> to determine how to unwind or walk the stack
    -> In 64-bit Windows, exception handling and stack unwinding rely on function tables. 
==================================================================================================
- called to retrieve the function table entries for funcs in the specified region
            - definition of the PGET_RUNTIME_FUNCTION_CALLBACK type, see WinNT.h
==================================================================================================
- in start initterm() init and run ~4 function parsing TEB -> parse PE -> get the installation function 
    - RtlInstallFunctionTableCallback dynamic call 0x1400014DE -> call [rsp+58h+var_28] -> fallback
        - 1400010B0 == C_fallbackFunction() <- are used to create the RUNTIME_FUNCTION information at runtime
            - _key_BUFF is passed to blob 
            - takes the C_big_blob in no granular size 
            - all function start addresses points to "F4" "HLT"
            - according to IDA -> HLT trigger fallback that creates RUNTIME_FUNCTION 
                - 6910000: Priveleged instruction (exc.code c0000096, tid 27052)
                - FunctionStart: 0x0 - FunctionEnd: 0x1 - UnwindInfo: 0x48
--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
                        Print offsets of RUNTIME_FUNCTION that resolved 
--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
import ida_dbg
import idaapi

# Get the value of the RAX register
rax_value = ida_dbg.get_reg_val("RAX")

# Define the offsets for the RUNTIME_FUNCTION structure
FUNCTION_START_OFFSET = 0x0  # Offset 0x0
FUNCTION_END_OFFSET = 0x4    # Offset 0x4
UNWIND_INFO_OFFSET = 0x8     # Offset 0x8

# Dereference the fields (using get_dword since these are 32-bit fields)
function_start = idaapi.get_dword(rax_value + FUNCTION_START_OFFSET)
function_end = idaapi.get_dword(rax_value + FUNCTION_END_OFFSET)
unwind_info = idaapi.get_dword(rax_value + UNWIND_INFO_OFFSET)

# Print out the fields
print(f"FunctionStart: {function_start:#x} - FunctionEnd: {function_end:#x} - UnwindInfo: {unwind_info:#x}")
--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
                        print actuall address by adding table address 
--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
import ida_dbg
import idaapi

# this is the base for code blob allocated in the TLscallback
table_base = 0x6990000


# Get the value of the RAX register
rax_value = ida_dbg.get_reg_val("RAX")

# Define the offsets for the RUNTIME_FUNCTION structure
FUNCTION_START_OFFSET = 0x0  # Offset 0x0
FUNCTION_END_OFFSET = 0x4    # Offset 0x4
UNWIND_INFO_OFFSET = 0x8     # Offset 0x8

# Dereference the fields (using get_dword since these are 32-bit fields)
function_start = idaapi.get_dword(rax_value + FUNCTION_START_OFFSET)
function_end = idaapi.get_dword(rax_value + FUNCTION_END_OFFSET)
unwind_info = idaapi.get_dword(rax_value + UNWIND_INFO_OFFSET)

# Print out the fields
print(f"FunctionStart: {table_base + function_start:#x} - FunctionEnd: {table_base + function_end:#x} - UnwindInfo: {table_base + unwind_info:#x}")
--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
def print_unwind_info(ea):
    # Get the structure ID
    sid = idc.get_struc_id("_UNWIND_INFO")
    if sid != idaapi.BADADDR:
        # Get structure members
        version_flags = idc.get_wide_byte(ea)
        version = version_flags & 0b111  # Extract the lower 3 bits (Version)
        flags = (version_flags >> 3) & 0b11111  # Extract the upper 5 bits (Flags)
        print(f"Version: {version}")
        print(f"Flags: {flags}")

        # Get SizeOfProlog (next byte)
        size_of_prolog = idc.get_wide_byte(ea + 1)
        print(f"SizeOfProlog: {size_of_prolog:X}")

        # Get CountOfCodes (next byte)
        count_of_codes = idc.get_wide_byte(ea + 2)
        print(f"CountOfCodes: {count_of_codes:X}")

        # Get FrameRegister and FrameOffset (next byte)
        frame_register_offset = idc.get_wide_byte(ea + 3)
        frame_register = frame_register_offset & 0b1111  # Lower 4 bits
        frame_offset = (frame_register_offset >> 4) & 0b1111  # Upper 4 bits
        print(f"FrameRegister: {frame_register:X}")
        print(f"FrameOffset: {frame_offset:X}")

        # Get the first UnwindCode (just for demonstration, this would normally be an array)
        unwind_code = idc.get_wide_byte(ea + 4)
        print(f"UnwindCode[0]: {unwind_code:X}")
    else:
        print("Structure not found at the address")

# Print the structure at the address
print_unwind_info(UnwindInfo)
--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------

            - how it decide 0 or 1 and what after 
                - If the function table is successfully installed, then TRUE is returned. Otherwise, FALSE is returned. -> groups.google.com/g/microsoft.public.win32.programmer.kernel/c/GI51wBCcZmU/m/pYMcO3FBkbkJ
        - 140097AF0 C_big_blob == filled by TlsCallback_0() ---- size -> {800000}
        - when function table installed --> size is 0x2E4D26
        - 


        - C_fallbackFunction fallback mechanism for generating unwind information (RUNTIME_FUNCTION structure)
            - Allocates a 12-byte block of memory to store the unwind information.
        
        - ntdll_RtlLookupFunctionEntry
            - always take stream that starts with F4
        - ntdll_RtlVirtualUnwind
            - 

==================================================================================================
Call Stack spoofing or hiding 
    - in sysinformer -- bp C_print_WrongKey 
        -> RtlDispatchException
        -> other offsets from the C_big_blob in the stack 
    - in windbg -- 

==================================================================================================

---------------------------
    -> sub_1400011B0 -> printf -> "Flag: %s@flare-on.com\n" -> C_print_the_flag
    -> sub_1400011F0 -> printf -> "Wrong key\n" -> C_print_WrongKey
---------------------------

each time C_fallbackFunction run 


RtlInstallFunctionTableCallback call creates a function table that covers the memory range from 69A0000 to 69AFFFFF (800000 bytes).
69A0107
69A020A
69A0315
69A0407
69A0510
- non consistent granular 






REF 
- https://billdemirkapi.me/abusing-exceptions-for-code-execution-part-2/
- https://www.timdbg.com/posts/writing-a-debugger-from-scratch-part-6/
- https://dtsec.us/2023-09-15-StackSpoofin/
- https://groups.google.com/g/microsoft.public.win32.programmer.kernel/c/GI51wBCcZmU/m/pYMcO3FBkbkJ
- https://github.com/mgeeky/ThreadStackSpoofer/blob/master/README.md
- https://blog.talosintelligence.com/exceptional-behavior-windows-81-x64-seh/
    - https://www.osronline.com/article.cfm%5earticle=469.htm
    - http://www.uninformed.org/?v=4&a=1&t=sumry
    - http://www.nynaeve.net/?p=113
- https://www.nektra.com/main/2014/04/23/64-bit-microsoft-office-applications-do-not-like-stack-walking/
- https://github.com/MicrosoftDocs/cpp-docs/blob/main/docs/build/exception-handling-x64.md
- https://youtu.be/COEv2kq_Ht8?t=3248

1)
SEH exceptions (from "Structured Exception Handling"). Also known as Win32 or system exceptions. 
These are exhaustively covered in the famous Matt Pietrek article[1]. They are the only exceptions available to C programs. The compiler-level support includes keywords __try, __except, __finally and a few others.

2)
C++ exceptions (sometimes referred to as "EH"). Implemented on top of SEH, C++ exceptions allow throwing and catching of arbitrary types. A very important feature of C++ is automatic stack unwinding during exception processing, and MSVC uses a pretty complex underlying framework to ensure that it works properly in all cases.


------------------------------------------------
flags 
UNW_FLAG_NHANDLER   0x0 The function has no handler.
UNW_FLAG_EHANDLER   0x1 The function has an exception handler that should be called.
UNW_FLAG_UHANDLER   0x2 The function has a termination handler that should be called when unwinding an exception.
UNW_FLAG_CHAININFO  0x4 The FunctionEntry member is the contents of a previous function table entry.
-------------------------------------------------

Bit and its Register
0   RAX
1   RCX
2   RDX
3   RBX
4   RSP
5   RBP
6   RSI
7   RDI
8 to 15 R8 to R15